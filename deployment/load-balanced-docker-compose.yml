version: '3.8'

services:
  # Nginx 负载均衡器
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
      - backend-3
      - frontend
    restart: unless-stopped
    networks:
      - app-network

  # Redis 用于会话共享和缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PostgreSQL 数据库（用于持久化任务状态）
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: aitest
      POSTGRES_USER: aitest
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aitest123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # 后端服务实例 1
  backend-1:
    build: ../backend
    environment:
      - INSTANCE_ID=backend-1
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://aitest:${POSTGRES_PASSWORD:-aitest123}@postgres:5432/aitest
      - MAX_CONCURRENT_TASKS=5
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GROK_API_KEY=${GROK_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - GITLAB_API_URL=${GITLAB_API_URL:-https://gitlab.com/api/v4}
    volumes:
      - shared-storage:/app/shared
      - ./logs/backend-1:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # 后端服务实例 2
  backend-2:
    build: ../backend
    environment:
      - INSTANCE_ID=backend-2
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://aitest:${POSTGRES_PASSWORD:-aitest123}@postgres:5432/aitest
      - MAX_CONCURRENT_TASKS=5
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GROK_API_KEY=${GROK_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - GITLAB_API_URL=${GITLAB_API_URL:-https://gitlab.com/api/v4}
    volumes:
      - shared-storage:/app/shared
      - ./logs/backend-2:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # 后端服务实例 3
  backend-3:
    build: ../backend
    environment:
      - INSTANCE_ID=backend-3
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://aitest:${POSTGRES_PASSWORD:-aitest123}@postgres:5432/aitest
      - MAX_CONCURRENT_TASKS=5
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GROK_API_KEY=${GROK_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - GITLAB_API_URL=${GITLAB_API_URL:-https://gitlab.com/api/v4}
    volumes:
      - shared-storage:/app/shared
      - ./logs/backend-3:/app/logs
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # 前端服务
  frontend:
    build: ../frontend
    environment:
      - REACT_APP_API_URL=http://nginx/api
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - app-network

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.30.0.0/16

volumes:
  redis-data:
  postgres-data:
  shared-storage:
  prometheus-data:
  grafana-data:
